{
	"info": {
		"_postman_id": "rti-solutions-api",
		"name": "RTI Solutions API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"description": "Postman collection for RTI Solutions API with comprehensive testing scenarios"
	},
	"item": [
		{
			"name": "📁 Authentication",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data and token\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('name');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"    pm.expect(jsonData.data.user).to.have.property('role');",
									"});",
									"",
									"// Save token for future requests",
									"const jsonData = pm.response.json();",
									"pm.globals.set(\"auth_token\", jsonData.data.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{user_name}}\",\n  \"email\": \"{{user_email}}\",\n  \"password\": \"{{user_password}}\",\n  \"password_confirmation\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data and token\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('name');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"    pm.expect(jsonData.data.user).to.have.property('role');",
									"});",
									"",
									"// Save token for future requests",
									"const jsonData = pm.response.json();",
									"pm.globals.set(\"auth_token\", jsonData.data.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{user_email}}\",\n  \"password\": \"{{user_password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Me",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('name');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"    pm.expect(jsonData.data.user).to.have.property('role');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"// Clear token",
									"pm.globals.unset(\"auth_token\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "📁 Tasks - Admin User",
			"item": [
				{
					"name": "GET /tasks - Basic listing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /tasks - Filter by status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All tasks have the correct status\", function () {",
									"    const jsonData = pm.response.json();",
									"    const tasks = jsonData.data;",
									"    tasks.forEach(task => {",
									"        pm.expect(task.status).to.eql(pm.environment.get(\"filter_status\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks?status={{filter_status}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "status",
									"value": "{{filter_status}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /tasks - Filter by priority",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All tasks have the correct priority\", function () {",
									"    const jsonData = pm.response.json();",
									"    const tasks = jsonData.data;",
									"    tasks.forEach(task => {",
									"        pm.expect(task.priority).to.eql(pm.environment.get(\"filter_priority\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks?priority={{filter_priority}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "priority",
									"value": "{{filter_priority}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /tasks - Filter by assigned_to",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All tasks are assigned to the correct user\", function () {",
									"    const jsonData = pm.response.json();",
									"    const tasks = jsonData.data;",
									"    tasks.forEach(task => {",
									"        pm.expect(task.assigned_to).to.eql(parseInt(pm.environment.get(\"filter_assigned_to\")));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks?assigned_to={{filter_assigned_to}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "assigned_to",
									"value": "{{filter_assigned_to}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /tasks - Filter by tags",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks?tag={{filter_tag}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "tag",
									"value": "{{filter_tag}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /tasks - Filter by due_date_range",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks?due_date_from={{due_date_from}}&due_date_to={{due_date_to}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "due_date_from",
									"value": "{{due_date_from}}"
								},
								{
									"key": "due_date_to",
									"value": "{{due_date_to}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /tasks - Search in title/description",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Tasks contain search term in title or description\", function () {",
									"    const jsonData = pm.response.json();",
									"    const tasks = jsonData.data;",
									"    const searchTerm = pm.environment.get(\"search_term\").toLowerCase();",
									"    tasks.forEach(task => {",
									"        pm.expect(task.title.toLowerCase() + task.description.toLowerCase()).to.include(searchTerm);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks?search={{search_term}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "search",
									"value": "{{search_term}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /tasks - Sorting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks?sort_by={{sort_by}}&sort_direction={{sort_direction}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "{{sort_by}}"
								},
								{
									"key": "sort_direction",
									"value": "{{sort_direction}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /tasks - Pagination",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array and pagination metadata\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData).to.have.property('meta');",
									"    pm.expect(jsonData.meta).to.have.property('current_page');",
									"    pm.expect(jsonData.meta).to.have.property('per_page');",
									"    pm.expect(jsonData.meta).to.have.property('total');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks?page={{page}}&per_page={{per_page}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "per_page",
									"value": "{{per_page}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /tasks/{id} - Get specific task",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has task data with required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('title');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data).to.have.property('priority');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /tasks - Create task",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has task data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('title');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data).to.have.property('priority');",
									"    pm.expect(jsonData.data).to.have.property('version');",
									"",
									"    // Save task ID for future requests",
									"    pm.globals.set(\"task_id\", jsonData.data.id);",
									"    pm.globals.set(\"task_version\", jsonData.data.version);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{task_title}}\",\n  \"description\": \"{{task_description}}\",\n  \"status\": \"{{task_status}}\",\n  \"priority\": \"{{task_priority}}\",\n  \"due_date\": \"{{task_due_date}}\",\n  \"assigned_to\": {{task_assigned_to}},\n  \"tag_ids\": {{task_tag_ids}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /tasks/{id} - Update task with optimistic locking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated task data with incremented version\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('title');",
									"    pm.expect(jsonData.data).to.have.property('version');",
									"    pm.expect(jsonData.data.version).to.be.above(pm.environment.get(\"task_version\"));",
									"",
									"    // Update task version for future requests",
									"    pm.globals.set(\"task_version\", jsonData.data.version);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{updated_task_title}}\",\n  \"description\": \"{{updated_task_description}}\",\n  \"status\": \"{{updated_task_status}}\",\n  \"priority\": \"{{updated_task_priority}}\",\n  \"due_date\": \"{{updated_task_due_date}}\",\n  \"assigned_to\": {{updated_task_assigned_to}},\n  \"tag_ids\": {{updated_task_tag_ids}},\n  \"version\": {{task_version}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH /tasks/{id}/toggle-status - Status cycling",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has task with updated status\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"version\": {{task_version}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}/toggle-status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}",
								"toggle-status"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /tasks/{id} - Soft delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH /tasks/{id}/restore - Restore deleted task",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has restored task data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('title');",
									"    pm.expect(jsonData.data).to.have.property('deleted_at');",
									"    pm.expect(jsonData.data.deleted_at).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}/restore",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}",
								"restore"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "📁 Tasks - Regular User",
			"item": [
				{
					"name": "GET /tasks - Basic listing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /tasks - Filter by assigned tasks only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"All tasks are assigned to the current user\", function () {",
									"    const jsonData = pm.response.json();",
									"    const tasks = jsonData.data;",
									"    const userId = pm.globals.get(\"user_id\");",
									"    tasks.forEach(task => {",
									"        pm.expect(task.assigned_to).to.eql(parseInt(userId));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks?assigned_to={{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "assigned_to",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /tasks/{id} - Get specific task (assigned or owned)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has task data with required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('title');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data).to.have.property('priority');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /tasks - Create task",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has task data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('title');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data).to.have.property('priority');",
									"    pm.expect(jsonData.data).to.have.property('version');",
									"",
									"    // Save task ID for future requests",
									"    pm.globals.set(\"task_id\", jsonData.data.id);",
									"    pm.globals.set(\"task_version\", jsonData.data.version);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{task_title}}\",\n  \"description\": \"{{task_description}}\",\n  \"status\": \"{{task_status}}\",\n  \"priority\": \"{{task_priority}}\",\n  \"due_date\": \"{{task_due_date}}\",\n  \"tag_ids\": {{task_tag_ids}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /tasks/{id} - Update own task with optimistic locking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated task data with incremented version\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('title');",
									"    pm.expect(jsonData.data).to.have.property('version');",
									"    pm.expect(jsonData.data.version).to.be.above(pm.environment.get(\"task_version\"));",
									"",
									"    // Update task version for future requests",
									"    pm.globals.set(\"task_version\", jsonData.data.version);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"{{updated_task_title}}\",\n  \"description\": \"{{updated_task_description}}\",\n  \"status\": \"{{updated_task_status}}\",\n  \"priority\": \"{{updated_task_priority}}\",\n  \"due_date\": \"{{updated_task_due_date}}\",\n  \"tag_ids\": {{updated_task_tag_ids}},\n  \"version\": {{task_version}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH /tasks/{id}/toggle-status - Status cycling",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has task with updated status\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"version\": {{task_version}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}/toggle-status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}",
								"toggle-status"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /tasks/{id} - Soft delete own task",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "📁 Tags - Admin User",
			"item": [
				{
					"name": "GET /tags - List all tags",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tags",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /tags - List all tags with task counts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array with task counts\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    if (jsonData.data.length > 0) {",
									"        pm.expect(jsonData.data[0]).to.have.property('tasks_count');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tags?with_counts=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags"
							],
							"query": [
								{
									"key": "with_counts",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /tags - Create tag",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has tag data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('color');",
									"",
									"    // Save tag ID for future requests",
									"    pm.globals.set(\"tag_id\", jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{tag_name}}\",\n  \"color\": \"{{tag_color}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tags",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /tags/{id} - Update tag",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated tag data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('color');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{updated_tag_name}}\",\n  \"color\": \"{{updated_tag_color}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tags/{{tag_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags",
								"{{tag_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /tags/{id} - Delete tag",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tags/{{tag_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags",
								"{{tag_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "📁 Tags - Regular User",
			"item": [
				{
					"name": "GET /tags - List all tags (read-only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tags",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /tags/{id} - Get specific tag (read-only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({",
									"    key: 'Authorization',",
									"    value: 'Bearer ' + pm.globals.get('auth_token')",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has tag data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('color');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tags/{{tag_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags",
								"{{tag_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}